#!/bin/bash

function usage() { echo "Usage: $0 [-d <duration in seconds>] [-u <number of concurrent users>] [-w <work rate - requests/second] [-n <kubernetes namespace from where to run the load injector] [<target url> ]" 1>&2; exit 1; }

function loadTestExists?() {
    exists=`kubectl get pod -n $namespace|grep loadtest|cut -f 1 -d " "`
    if [ -z $exists ] ; then
        printf "false"
    else
        printf "true"
    fi
}

function isRunning?() {
    running=`kubectl get pod -n $namespace|grep loadtest|grep "Running"|cut -f 1 -d " "`
    if [ -z $running ] ; then
        printf "false"
    else
        printf "true"
    fi
}

function strip_quotes() {
    sed -e 's/^"//' -e 's/"$//' <<< $1
}

function get_node_name() {
    strip_quotes $(curl -s http://127.0.0.1:9090/api/v1/nodes |jq '.items[0].metadata.name')
}

function get_node_ip_address() {
    node=$(get_node_name)
    strip_quotes $(curl -s http://127.0.0.1:9090/api/v1/nodes/$node |jq '.status.addresses[] |select(.type=="InternalIP")'|jq '.address')
}

function generate_loadtester_resource_file() {
    echo "Connecting to kubernetes to get node ip address"
    kubectl proxy --port 9090 &
    pid=$!

    sleep 2

    url=$1
    duration=$2
    users=$3
    workRate=$4
    namespace=$5
    nodeIpAddress=$(get_node_ip_address)

    echo "node ip address is $nodeIpAddress, used for local name resolution"

    cat << EOF > /tmp/loadtest-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: loadtest
  namespace: $namespace
spec:
  containers:
  - name: loader
    image: pivotaleducation/loadtest:latest
    resources:
      limits:
        cpu: "1"
        memory: "64Mi"
    env:
    - name: URL
      value: "${url}"
    - name: DURATION
      value: "${duration}"
    - name: NUM_USERS
      value: "${users}"
    - name: REQUESTS_PER_SECOND
      value: "${workRate}"
  restartPolicy: Never
  hostAliases:
    - ip: "${nodeIpAddress}"
      hostnames:
      - "tracker.k8s.local"
      - "development.tracker.k8s.local"
      - "review.tracker.k8s.local"
EOF

    kill $pid
}

while getopts ":d:u:w:n:h:i:" o; do
    case "${o}" in
        d)
            duration=${OPTARG}
            ;;
        u)
            users=${OPTARG}
            ;;
        w)
            workRate=${OPTARG}
            ;;
        n)
            namespace=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ ! -z "$1" ] ; then
    url=$1
fi

URL_EXPR='http[s]{0,1}://[a-zA-Z0-9\.]*'
if [[ ! $url =~ $URL_EXPR ]] ; then
    echo "URL is missing or not formatted correctly."
    echo "You need http or https protocol specifier and valid host name."
    echo "  Example: https://yahoo.com"
    exit 1
fi

if [ -z "$duration" ] || [ -z "$users" ] || [ -z "$workRate" ] || [ -z "$namespace" ] || [ -z "$url" ]; then
    usage
    exit 1
fi

exist=`loadTestExists?`

if [ $exist = true ]; then
    echo "aborting existing load test, or cleaning up previous load test..."
    kubectl delete pod/loadtest
fi

echo "run load test in $namespace namespace with parameters:"
echo "  duration: $duration"
echo "  number of users: $users"
echo "  work rate (requests per second: $workRate"
echo "  url: $url"

generate_loadtester_resource_file $url $duration $users $workRate $namespace
kubectl apply -f /tmp/loadtest-pod.yaml
rm /tmp/loadtest-pod.yaml

echo "waiting for pod/loadtest to start."

running=`isRunning?`
while [ $running = false ]; do
    printf "."
    sleep 1
    running=`isRunning?`
done
echo ""
echo ""

kubectl logs pod/loadtest -n $namespace -f
